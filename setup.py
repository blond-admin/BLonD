import sys
import os
import subprocess
from setuptools import setup, find_packages
from blond._version import __version__
from distutils import dir_util

class BuildCommand(distutils.cmd.Command):
    """Call setup_cpp to compile all C/C++ source files."""

    description = 'Build the shared libraries'
    user_options = [
        # The format is (long option, short option, description).
        # ('build-rcfile=', None, 'path to build config file'),
    ]

    def initialize_options(self):
        """Set default values for options."""
        # Each user option must be listed here with their default value.
        # self.build_rcfile = ''
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        subprocess.call('python blond/setup_cpp.py')


class CleanCommand(distutils.cmd.Command):
    """A custom command to run compile all C/C++ source files."""

    description = 'Clean all files and dirs generated by the build command'
    user_options = []

    # def initialize_options(self):
    #     """Set default values for options."""
    #     # Each user option must be listed here with their default value.
    #     # self.build_rcfile = ''
    #     pass

    # def finalize_options(self):
    #     """Post-process options."""
    #     pass

    def run(self):
        """Run command."""
        dir_util.remove_tree('build', verbose=True)
        dir_util.remove_tree('dist', verbose=True)
        dir_util.remove_tree('blond.egg-info', verbose=True)



class TestCommand(distutils.cmd.Command):
    """Run the unittests."""

    description = 'Run the unittests'
    user_options = [
        # The format is (long option, short option, description).
        # ('build-rcfile=', None, 'path to build config file'),
    ]

    def initialize_options(self):
        """Set default values for options."""
        # Each user option must be listed here with their default value.
        # self.build_rcfile = ''
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        subprocess.call('pytest -v unittests/*/test*.py', shell=True)


class Pep8Command(distutils.cmd.Command):
    """Make the code to PEP8 compliant."""

    description = 'Make the code PEP8 compliant'
    user_options = [
        # The format is (long option, short option, description).
        # ('build-rcfile=', None, 'path to build config file'),
    ]

    def initialize_options(self):
        """Set default values for options."""
        # Each user option must be listed here with their default value.
        # self.build_rcfile = ''
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        subprocess.call('python blond/sanity_check.py --pep8', shell=True)


class DocsCommand(distutils.cmd.Command):
    """Compile the Docs to html"""

    description = 'Compile the Docs to html'
    user_options = [
        # The format is (long option, short option, description).
        # ('build-rcfile=', None, 'path to build config file'),
    ]

    def initialize_options(self):
        """Set default values for options."""
        # Each user option must be listed here with their default value.
        # self.build_rcfile = ''
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        subprocess.call('python blond/sanity_check.py --docs', shell=True)


setup(name='blond',
      version=__version__,
      description='CERN code for the simulation of longitudinal beam dynamics in synchrotrons.',
      keywords='Beam Longitudinal Dynamics Synchrotrons CERN',
      author='Helga Timko',
      author_email='helga.timko@cern.ch',
      maintainer='Konstantinos Iliakis',
      maintainer_email='konstantinos.iliakis@cern.ch',
      long_description=open('README.md').read(),
      url='https://github.com/blond-admin/BLonD',
      cmdclass={'build': BuildCommand,
                'cleanall': CleanAllCommand,
                'test': TestCommmand,
                'pep8': Pep8Command,
                'docs': DocsCommand},
      # package_dir={'': 'BLonD'},
      # packages=['BLonD/beam/', 'BLonD/impedances/', ''],
      packages=find_packages(
          exclude=['__doc', '__BENCHMARKS', '__EXAMPLES', 'unittests']),
      include_package_data=True,
      setup_requires=['numpy',
                      'scipy',
                      'h5py',
                      'matplotlib'],
      classifiers=[
          "Programming Language :: Python :: 3",
          "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
          "Operating System :: OS Independent"]
      # test_suite="unittests"
      )

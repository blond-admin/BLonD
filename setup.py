import sys
import os
import subprocess
from setuptools import setup, find_packages
from blond._version import __version__
import distutils
from shutil import rmtree

class Build(distutils.cmd.Command):
    """Call compile to compile all C/C++ source files."""

    description = 'Build the shared libraries'
    user_options = [
        # The format is (long option, short option, description).
        ('parallel', 'p', 'Enable Multi-threaded code'),
        ('boost=', None, 'Compile with the Boost Library'),
        ('compiler=', None, 'Specify the C++ compiler')
    ]

    def initialize_options(self):
        """Set default values for options."""
        # Each user option must be listed here with their default value.
        self.parallel = None
        self.boost = None
        self.compiler = None

    def finalize_options(self):
        """Post-process options."""
        # print('Parallel: ', self.parallel)
        # print('Boost: ', self.boost)
        # print('Compiler: ', self.compiler)
        pass

    def run(self):
        """Run command."""
        cmd = ['python', 'compile.py']
        if self.parallel:
            cmd.append('-p')
        if self.boost:
            cmd += ['-b', self.boost]
        if self.compiler:
            cmd += ['-c', self.compiler]

        subprocess.call(cmd)


class CleanAll(distutils.cmd.Command):
    """A custom command to run compile all C/C++ source files."""

    description = 'Clean all files and dirs generated by the build command'
    user_options = []

    def initialize_options(self):
        """Set default values for options."""
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        rmtree('build', ignore_errors=True)
        rmtree('dist', ignore_errors=True)
        rmtree('blond.egg-info', ignore_errors=True)


class Test(distutils.cmd.Command):
    """Run the unittests."""

    description = 'Run the unittests'
    user_options = [
        # The format is (long option, short option, description).
        ('testdir=', 't', 'Directory to collect the unittests'),
    ]

    def initialize_options(self):
        """Set default values for options."""
        self.testdir = 'unittests'
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        subprocess.call(['pytest', '-v', self.testdir])


class PEP8(distutils.cmd.Command):
    """Make the code to PEP8 compliant."""

    description = 'Make the code PEP8 compliant'
    user_options = [
        # The format is (long option, short option, description).
        ('git', 'g', 'Check only the commited files'),
    ]

    def initialize_options(self):
        """Set default values for options."""
        # Each user option must be listed here with their default value.
        self.git = False
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        cmd = ['python', 'sanity_check.py', '--pep8']
        if self.git is not False:
            cmd.append('git')
        subprocess.call(cmd)


class Docs(distutils.cmd.Command):
    """Compile the Docs to html"""

    description = 'Compile the Docs to html'
    user_options = []

    def initialize_options(self):
        """Set default values for options."""
        pass

    def finalize_options(self):
        """Post-process options."""
        pass

    def run(self):
        """Run command."""
        subprocess.call(['python', 'sanity_check.py', '--docs'])


setup(name='blond',
      version=__version__,
      description='CERN code for the simulation of longitudinal beam dynamics in synchrotrons.',
      keywords='Beam Longitudinal Dynamics Synchrotrons CERN',
      author='Helga Timko',
      author_email='helga.timko@cern.ch',
      maintainer='Konstantinos Iliakis',
      maintainer_email='konstantinos.iliakis@cern.ch',
      long_description=open('README.md').read(),
      url='https://github.com/blond-admin/BLonD',
      cmdclass={'build': Build,
                'cleanall': CleanAll,
                'test': Test,
                'pep8': PEP8,
                'docs': Docs},
      packages=find_packages(
          exclude=['__doc', '__BENCHMARKS', '__EXAMPLES', 'unittests']),
      include_package_data=True,
      setup_requires=['numpy',
                      'scipy',
                      'h5py',
                      'matplotlib'],
      classifiers=[
          "Programming Language :: Python :: 3",
          "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
          "Operating System :: OS Independent"]
      # test_suite="unittests"
      )

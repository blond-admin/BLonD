# coding: utf8
# Copyright 2014-2017 CERN. This software is distributed under the
# terms of the GNU General Public Licence version 3 (GPL Version 3),
# copied verbatim in the file LICENCE.md.
# In applying this licence, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization or
# submit itself to any jurisdiction.
# Project website: http://blond.web.cern.ch/

"""
Unittest for llrf.filters

:Authors: **Birk Emil Karlsen-BÃ¦ck**, **Helga Timko**
"""

import unittest
import numpy as np
from scipy.constants import c

from blond.llrf.impulse_response import rectangle, triangle, \
    SPS4Section200MHzTWC
from blond.input_parameters.ring import Ring
from blond.input_parameters.rf_parameters import RFStation
from blond.beam.beam import Beam, Proton
from blond.beam.distributions import bigaussian
from blond.beam.profile import Profile, CutOptions
from blond.impedances.impedance import InducedVoltageTime, TotalInducedVoltage
from blond.llrf.cavity_feedback import SPSOneTurnFeedback, \
    CavityFeedbackCommissioning
from blond.impedances.impedance_sources import TravelingWaveCavity


class TestRectangle(unittest.TestCase):

    def test_1(self):

        tau = 1.
        time = np.array([-1, -0.75, -0.5, -0.25, 0., 0.25, 0.5, 0.75, 1])
        rect_exp = np.array([0., 0., 0.5, 1., 1., 1., 0.5, 0., 0.])
        rect_act = rectangle(time, tau)

        rect_exp = np.around(rect_exp, 12)
        rect_act = np.around(rect_act, 12)
        self.assertSequenceEqual(rect_exp.tolist(), rect_act.tolist(),
            msg="In TestRectangle test 1: rectangle arrays differ")

    def test_2(self):

        tau = 1.
        time = np.array([-0.51, -0.26, 0.01, 0.26, 0.51, 0.76, 1.01])
        rect_exp = np.array([0.5, 1., 1., 1., 0.5, 0., 0.])
        rect_act = rectangle(time, tau)

        rect_exp = np.around(rect_exp, 12)
        rect_act = np.around(rect_act, 12)
        self.assertSequenceEqual(rect_exp.tolist(), rect_act.tolist(),
            msg="In TestRectangle test 2: rectangle arrays differ")


class TestTriangle(unittest.TestCase):

    def test_1(self):

        tau = 1.
        time = np.array([-0.5, -0.25, 0., 0.25, 0.5, 0.75, 1, 1.25, 1.5])
        tri_exp = np.array([0., 0., 0.5, 0.75, 0.5, 0.25, 0., 0., 0.])
        tri_act = triangle(time, tau)

        tri_exp = np.around(tri_exp, 12)
        tri_act = np.around(tri_act, 12)
        self.assertSequenceEqual(tri_exp.tolist(), tri_act.tolist(),
            msg="In TestTriangle test 1: triangle arrays differ")

    def test_2(self):

        tau = 1.
        time = np.array([-0.01, 0.26, 0.51, 0.76, 1.01, 1.26, 1.51])
        tri_exp = np.array([0.5, 0.74, 0.49, 0.24, 0., 0., 0.])
        tri_act = triangle(time, tau)

        tri_exp = np.around(tri_exp, 12)
        tri_act = np.around(tri_act, 12)
        self.assertSequenceEqual(tri_exp.tolist(), tri_act.tolist(),
            msg="In TestTriangle test 2: triangle arrays differ")


class TestTravelingWaveCavity(unittest.TestCase):

    def test_vg(self):
        from blond.llrf.impulse_response import TravellingWaveCavity
        v_g = 0.0946+1

        with self.assertRaises(RuntimeError, msg="In TestTravelingWaveCavity,"
                               + " no exception for group velocity > 1"):

            TravellingWaveCavity(0.374, 43, 2.71e4, v_g, 2*np.pi*200.222e6)

    def test_wake(self):

        time = np.linspace(-0.1e-6, 0.7e-6, 1000)

        l_cav = 16.082
        v_g = 0.0946
        tau = l_cav/(v_g*c)*(1 + v_g)

        TWC_impedance_source = TravelingWaveCavity(l_cav**2 * 27.1e3 / 8,
                                                   200.222e6, 2*np.pi*tau)

        TWC_impedance_source.wake_calc(time-time[0])
        wake_impSource = np.around(TWC_impedance_source.wake/1e12, 10)

        TWC_impulse_response = SPS4Section200MHzTWC(df=0.2275e6)
        # omega_c not need for computation of wake function
        TWC_impulse_response.impulse_response_beam(2*np.pi*200.222e6, time)
        TWC_impulse_response.impulse_response_gen(2*np.pi*200.222e6, time)
        TWC_impulse_response.compute_wakes(time)
        wake_impResp = -np.around(TWC_impulse_response.W_beam/1e12, 10)

        self.assertListEqual(wake_impSource.tolist(), wake_impResp.tolist(),
                             msg="In TestTravelingWaveCavity test_wake: wake fields differ")

    @unittest.skip("FIXME")
    def test_vind(self):

        # randomly chose omega_c from allowed range
        np.random.seed(1980)
        factor = np.random.uniform(0.9, 1.1)

        # round results to this digits
        digit_round = 8

        # SPS parameters
        C = 2*np.pi*1100.009        # Ring circumference [m]
        gamma_t = 18.0              # Gamma at transition
        alpha = 1/gamma_t**2        # Momentum compaction factor
        p_s = 25.92e9               # Synchronous momentum at injection [eV]
        h = 4620                    # 200 MHz system harmonic
        V = 4.5e6                   # 200 MHz RF voltage
        phi = 0.                    # 200 MHz RF phase

        # Beam and tracking parameters
        N_m = 1e5                   # Number of macro-particles for tracking
        N_b = 1.0e11                # Bunch intensity [ppb]
        N_t = 1                     # Number of turns to track

        ring = Ring(C, alpha, p_s, Proton(), n_turns=N_t)
        rf = RFStation(ring, h, V, phi)
        beam = Beam(ring, N_m, N_b)
        bigaussian(ring, rf, beam, 3.2e-9/4, seed=1234, reinsertion=True)

        n_shift = 5     # how many rf-buckets to shift beam
        beam.dt += n_shift * rf.t_rf[0,0]
        profile = Profile(beam, CutOptions=
                          CutOptions(cut_left=(n_shift-1.5)*rf.t_rf[0,0],
                                     cut_right=(n_shift+1.5)*rf.t_rf[0,0],
                                     n_slices=140))
        profile.track()

        l_cav = 16.082
        v_g = 0.0946
        tau = l_cav/(v_g*c)*(1 + v_g)
        TWC_impedance_source = TravelingWaveCavity(l_cav**2 * 27.1e3 / 8,
                                                   200.222e6, 2*np.pi*tau)

        # Beam loading by convolution of beam and wake from cavity
        inducedVoltageTWC = InducedVoltageTime(beam, profile,
                                               [TWC_impedance_source])
        induced_voltage = TotalInducedVoltage(beam, profile,
                                              [inducedVoltageTWC])
        induced_voltage.induced_voltage_sum()
        V_ind_impSource = np.around(induced_voltage.induced_voltage,
                                    digit_round)

        # Beam loading via feed-back system
        OTFB_4 = SPSOneTurnFeedback(rf, beam, profile, 4, n_cavities=1,
            Commissioning=CavityFeedbackCommissioning(open_FF=True, rot_IQ=1), df=0.2275e6)
        OTFB_4.counter = 0  # First turn

        OTFB_4.omega_c = factor * OTFB_4.TWC.omega_r
        # Compute impulse response
        OTFB_4.TWC.impulse_response_beam(OTFB_4.omega_c, profile.bin_centers)

        # Compute induced voltage in (I,Q) coordinates
        OTFB_4.track()
        # convert back to time
        V_ind_OTFB \
            = np.abs(OTFB_4.V_IND_FINE_BEAM[-OTFB_4.profile.n_slices:]) \
                * np.sin(OTFB_4.omega_c*profile.bin_centers +
                         np.angle(OTFB_4.V_IND_FINE_BEAM[-OTFB_4.profile.n_slices:]) - np.pi / 2)

        V_ind_OTFB = np.around(V_ind_OTFB, digit_round)

        ratio_array = np.array(V_ind_impSource.tolist()) / np.array(V_ind_OTFB.tolist())
        ratio_array = ratio_array[~np.isnan(ratio_array)]
        max_ratio = np.max(ratio_array)

        max_ratio_exp = 1.0
        len_wo_nan_exp = 77
        self.assertAlmostEqual(max_ratio, max_ratio_exp,
                               places=digit_round,
                               msg="In TravelingWaveCavity test_vind: induced voltages differ")
        self.assertAlmostEqual(len(ratio_array), len_wo_nan_exp,
                               places=digit_round,
                               msg="In TravelingWaveCavity test_vind: induced voltages differ")

    @unittest.skip("FIXME")
    def test_beam_fine_coarse(self):

        # Test beam impulse response and induced voltage
        # Compare on coarse and fine grid

        # Create a batch of 100 equal, short bunches at HL-LHC intensity
        ring = Ring(2*np.pi*1100.009, 1/18**2, 25.92e9, Particle=Proton())
        rf = RFStation(ring, [4620], [4.5e6], [0], n_rf=1)
        bunches = 100
        N_m = int(1e5)
        N_b = 2.3e11
        beam = Beam(ring, N_m, N_b)
        bigaussian(ring, rf, beam, 1.8e-9/4, seed=1234, reinsertion=True)
        beam2 = Beam(ring, bunches*N_m, bunches*N_b)
        bunch_spacing = 5 * rf.t_rf[0, 0]
        buckets = 5 * bunches
        for i in range(bunches):
            beam2.dt[i * N_m:(i + 1) * N_m] = beam.dt + i * bunch_spacing
            beam2.dE[i * N_m:(i + 1) * N_m] = beam.dE
        profile2 = Profile(beam2, CutOptions=CutOptions(cut_left=0,
            cut_right=bunches*bunch_spacing,n_slices=1000*buckets))
        profile2.track()

        # Calculate impulse response and induced voltage
        OTFB = SPSOneTurnFeedback(rf, beam2, profile2, 3, n_cavities=1,
            Commissioning=CavityFeedbackCommissioning(open_FF=True, rot_IQ=-1),
                                  df=0.18433333e6)
        OTFB.TWC.impulse_response_beam(OTFB.omega_c, OTFB.profile.bin_centers,
                                       OTFB.rf_centers)
        OTFB.track()

        imp_fine_meas = (OTFB.TWC.h_beam[::1000])[:100]
        imp_coarse_meas = OTFB.TWC.h_beam_coarse[:100]

        imp_fine_ref = np.array([1.0504062083e+12 + 0.0000000000e+00j,
                                 2.0781004955e+12 + 2.7183115978e+09j,
                                 2.0553850965e+12 + 5.3772054987e+09j,
                                 2.0326663360e+12 + 7.9766773057e+09j,
                                 2.0099443306e+12 + 1.0516722825e+10j,
                                 1.9872191969e+12 + 1.2997338066e+10j,
                                 1.9644910516e+12 + 1.5418519242e+10j,
                                 1.9417600113e+12 + 1.7780262770e+10j,
                                 1.9190261924e+12 + 2.0082565269e+10j,
                                 1.8962897118e+12 + 2.2325423561e+10j,
                                 1.8735506859e+12 + 2.4508834674e+10j,
                                 1.8508092314e+12 + 2.6632795838e+10j,
                                 1.8280654649e+12 + 2.8697304485e+10j,
                                 1.8053195030e+12 + 3.0702358252e+10j,
                                 1.7825714624e+12 + 3.2647954978e+10j,
                                 1.7598214597e+12 + 3.4534092708e+10j,
                                 1.7370696115e+12 + 3.6360769688e+10j,
                                 1.7143160345e+12 + 3.8127984368e+10j,
                                 1.6915608452e+12 + 3.9835735402e+10j,
                                 1.6688041604e+12 + 4.1484021645e+10j,
                                 1.6460460966e+12 + 4.3072842159e+10j,
                                 1.6232867705e+12 + 4.4602196207e+10j,
                                 1.6005262987e+12 + 4.6072083256e+10j,
                                 1.5777647978e+12 + 4.7482502976e+10j,
                                 1.5550023845e+12 + 4.8833455241e+10j,
                                 1.5322391754e+12 + 5.0124940128e+10j,
                                 1.5094752871e+12 + 5.1356957918e+10j,
                                 1.4867108362e+12 + 5.2529509093e+10j,
                                 1.4639459395e+12 + 5.3642594342e+10j,
                                 1.4411807134e+12 + 5.4696214555e+10j,
                                 1.4184152746e+12 + 5.5690370826e+10j,
                                 1.3956497397e+12 + 5.6625064451e+10j,
                                 1.3728842254e+12 + 5.7500296932e+10j,
                                 1.3501188481e+12 + 5.8316069972e+10j,
                                 1.3273537246e+12 + 5.9072385477e+10j,
                                 1.3045889714e+12 + 5.9769245560e+10j,
                                 1.2818247051e+12 + 6.0406652532e+10j,
                                 1.2590610424e+12 + 6.0984608912e+10j,
                                 1.2362980996e+12 + 6.1503117419e+10j,
                                 1.2135359936e+12 + 6.1962180977e+10j,
                                 1.1907748407e+12 + 6.2361802713e+10j,
                                 1.1680147576e+12 + 6.2701985956e+10j,
                                 1.1452558608e+12 + 6.2982734240e+10j,
                                 1.1224982669e+12 + 6.3204051301e+10j,
                                 1.0997420924e+12 + 6.3365941080e+10j,
                                 1.0769874538e+12 + 6.3468407718e+10j,
                                 1.0542344676e+12 + 6.3511455561e+10j,
                                 1.0314832504e+12 + 6.3495089159e+10j,
                                 1.0087339187e+12 + 6.3419313265e+10j,
                                 9.8598658892e+11 + 6.3284132832e+10j,
                                 9.6324137757e+11 + 6.3089553021e+10j,
                                 9.4049840113e+11 + 6.2835579191e+10j,
                                 9.1775777605e+11 + 6.2522216909e+10j,
                                 8.9501961879e+11 + 6.2149471941e+10j,
                                 8.7228404579e+11 + 6.1717350259e+10j,
                                 8.4955117347e+11 + 6.1225858036e+10j,
                                 8.2682111826e+11 + 6.0675001648e+10j,
                                 8.0409399656e+11 + 6.0064787676e+10j,
                                 7.8136992476e+11 + 5.9395222903e+10j,
                                 7.5864901923e+11 + 5.8666314312e+10j,
                                 7.3593139635e+11 + 5.7878069094e+10j,
                                 7.1321717247e+11 + 5.7030494640e+10j,
                                 6.9050646392e+11 + 5.6123598543e+10j,
                                 6.6779938704e+11 + 5.5157388601e+10j,
                                 6.4509605813e+11 + 5.4131872814e+10j,
                                 6.2239659348e+11 + 5.3047059384e+10j,
                                 5.9970110939e+11 + 5.1902956716e+10j,
                                 5.7700972210e+11 + 5.0699573420e+10j,
                                 5.5432254788e+11 + 4.9436918305e+10j,
                                 5.3163970295e+11 + 4.8115000386e+10j,
                                 5.0896130353e+11 + 4.6733828878e+10j,
                                 4.8628746583e+11 + 4.5293413201e+10j,
                                 4.6361830601e+11 + 4.3793762975e+10j,
                                 4.4095394026e+11 + 4.2234888026e+10j,
                                 4.1829448472e+11 + 4.0616798379e+10j,
                                 3.9564005551e+11 + 3.8939504264e+10j,
                                 3.7299076875e+11 + 3.7203016111e+10j,
                                 3.5034674052e+11 + 3.5407344556e+10j,
                                 3.2770808692e+11 + 3.3552500435e+10j,
                                 3.0507492397e+11 + 3.1638494786e+10j,
                                 2.8244736773e+11 + 2.9665338851e+10j,
                                 2.5982553421e+11 + 2.7633044074e+10j,
                                 2.3720953939e+11 + 2.5541622099e+10j,
                                 2.1459949925e+11 + 2.3391084776e+10j,
                                 1.9199552975e+11 + 2.1181444154e+10j,
                                 1.6939774681e+11 + 1.8912712486e+10j,
                                 1.4680626634e+11 + 1.6584902227e+10j,
                                 1.2422120423e+11 + 1.4198026033e+10j,
                                 1.0164267634e+11 + 1.1752096764e+10j,
                                 7.9070798521e+10 + 9.2471274799e+09j,
                                 5.6505686581e+10 + 6.6831314440e+09j,
                                 3.3947456317e+10 + 4.0601221211e+09j,
                                 1.1396223503e+10 + 1.3781131781e+09j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j])

        imp_coarse_ref = np.array([1.0504062083e+12 + 0.0000000000e+00j,
                                   2.0781004955e+12 + 2.7183115978e+09j,
                                   2.0553850965e+12 + 5.3772054987e+09j,
                                   2.0326663360e+12 + 7.9766773057e+09j,
                                   2.0099443306e+12 + 1.0516722825e+10j,
                                   1.9872191969e+12 + 1.2997338066e+10j,
                                   1.9644910516e+12 + 1.5418519242e+10j,
                                   1.9417600113e+12 + 1.7780262770e+10j,
                                   1.9190261924e+12 + 2.0082565269e+10j,
                                   1.8962897118e+12 + 2.2325423561e+10j,
                                   1.8735506859e+12 + 2.4508834674e+10j,
                                   1.8508092314e+12 + 2.6632795838e+10j,
                                   1.8280654649e+12 + 2.8697304485e+10j,
                                   1.8053195030e+12 + 3.0702358252e+10j,
                                   1.7825714624e+12 + 3.2647954978e+10j,
                                   1.7598214597e+12 + 3.4534092708e+10j,
                                   1.7370696115e+12 + 3.6360769688e+10j,
                                   1.7143160345e+12 + 3.8127984368e+10j,
                                   1.6915608452e+12 + 3.9835735402e+10j,
                                   1.6688041604e+12 + 4.1484021645e+10j,
                                   1.6460460966e+12 + 4.3072842159e+10j,
                                   1.6232867705e+12 + 4.4602196207e+10j,
                                   1.6005262987e+12 + 4.6072083256e+10j,
                                   1.5777647978e+12 + 4.7482502976e+10j,
                                   1.5550023845e+12 + 4.8833455241e+10j,
                                   1.5322391754e+12 + 5.0124940128e+10j,
                                   1.5094752871e+12 + 5.1356957918e+10j,
                                   1.4867108362e+12 + 5.2529509093e+10j,
                                   1.4639459395e+12 + 5.3642594342e+10j,
                                   1.4411807134e+12 + 5.4696214555e+10j,
                                   1.4184152746e+12 + 5.5690370826e+10j,
                                   1.3956497397e+12 + 5.6625064451e+10j,
                                   1.3728842254e+12 + 5.7500296932e+10j,
                                   1.3501188481e+12 + 5.8316069972e+10j,
                                   1.3273537246e+12 + 5.9072385477e+10j,
                                   1.3045889714e+12 + 5.9769245560e+10j,
                                   1.2818247051e+12 + 6.0406652532e+10j,
                                   1.2590610424e+12 + 6.0984608912e+10j,
                                   1.2362980996e+12 + 6.1503117419e+10j,
                                   1.2135359936e+12 + 6.1962180977e+10j,
                                   1.1907748407e+12 + 6.2361802713e+10j,
                                   1.1680147576e+12 + 6.2701985956e+10j,
                                   1.1452558608e+12 + 6.2982734240e+10j,
                                   1.1224982669e+12 + 6.3204051301e+10j,
                                   1.0997420924e+12 + 6.3365941080e+10j,
                                   1.0769874538e+12 + 6.3468407718e+10j,
                                   1.0542344676e+12 + 6.3511455561e+10j,
                                   1.0314832504e+12 + 6.3495089159e+10j,
                                   1.0087339187e+12 + 6.3419313265e+10j,
                                   9.8598658892e+11 + 6.3284132832e+10j,
                                   9.6324137757e+11 + 6.3089553021e+10j,
                                   9.4049840113e+11 + 6.2835579191e+10j,
                                   9.1775777605e+11 + 6.2522216909e+10j,
                                   8.9501961879e+11 + 6.2149471941e+10j,
                                   8.7228404579e+11 + 6.1717350259e+10j,
                                   8.4955117347e+11 + 6.1225858036e+10j,
                                   8.2682111826e+11 + 6.0675001648e+10j,
                                   8.0409399656e+11 + 6.0064787676e+10j,
                                   7.8136992476e+11 + 5.9395222903e+10j,
                                   7.5864901923e+11 + 5.8666314312e+10j,
                                   7.3593139635e+11 + 5.7878069094e+10j,
                                   7.1321717247e+11 + 5.7030494640e+10j,
                                   6.9050646392e+11 + 5.6123598543e+10j,
                                   6.6779938704e+11 + 5.5157388601e+10j,
                                   6.4509605813e+11 + 5.4131872814e+10j,
                                   6.2239659348e+11 + 5.3047059384e+10j,
                                   5.9970110939e+11 + 5.1902956716e+10j,
                                   5.7700972210e+11 + 5.0699573420e+10j,
                                   5.5432254788e+11 + 4.9436918305e+10j,
                                   5.3163970295e+11 + 4.8115000386e+10j,
                                   5.0896130353e+11 + 4.6733828878e+10j,
                                   4.8628746583e+11 + 4.5293413201e+10j,
                                   4.6361830601e+11 + 4.3793762975e+10j,
                                   4.4095394026e+11 + 4.2234888026e+10j,
                                   4.1829448472e+11 + 4.0616798379e+10j,
                                   3.9564005551e+11 + 3.8939504264e+10j,
                                   3.7299076875e+11 + 3.7203016111e+10j,
                                   3.5034674052e+11 + 3.5407344556e+10j,
                                   3.2770808692e+11 + 3.3552500435e+10j,
                                   3.0507492397e+11 + 3.1638494786e+10j,
                                   2.8244736773e+11 + 2.9665338851e+10j,
                                   2.5982553421e+11 + 2.7633044074e+10j,
                                   2.3720953939e+11 + 2.5541622099e+10j,
                                   2.1459949925e+11 + 2.3391084776e+10j,
                                   1.9199552975e+11 + 2.1181444154e+10j,
                                   1.6939774681e+11 + 1.8912712486e+10j,
                                   1.4680626634e+11 + 1.6584902227e+10j,
                                   1.2422120423e+11 + 1.4198026033e+10j,
                                   1.0164267634e+11 + 1.1752096764e+10j,
                                   7.9070798521e+10 + 9.2471274799e+09j,
                                   5.6505686581e+10 + 6.6831314440e+09j,
                                   3.3947456317e+10 + 4.0601221211e+09j,
                                   1.1396223503e+10 + 1.3781131781e+09j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j])

        np.testing.assert_allclose(-imp_fine_meas[:-7], np.conj(imp_fine_ref[:-7]), rtol=1e-8,
            atol=0, err_msg="In TestTravelingWaveCavity test_beam_fine_coarse,"
                            "mismatch in beam impulse response on fine grid")
        np.testing.assert_allclose(-imp_coarse_meas[:-7], np.conj(imp_coarse_ref[:-7]), rtol=1e-8,
            atol=0, err_msg="In TestTravelingWaveCavity test_beam_fine_coarse,"
                            "mismatch in beam impulse response on coarse grid")

        Vind_fine_meas = OTFB.V_IND_FINE_BEAM[-OTFB.profile.n_slices:]
        Vind_coarse_meas = OTFB.V_IND_COARSE_BEAM[-OTFB.n_coarse:]
        Vind_fine_meas = (Vind_fine_meas[::1000])[:100]
        Vind_coarse_meas = Vind_coarse_meas[:100]

        for i in range(0, len(Vind_coarse_meas)):
            print(f'{Vind_coarse_meas[i].real}+{Vind_coarse_meas[i].imag}j,')

        Vind_fine_ref = np.array([-2.0943906276757679e-10+1.8325917992162967e-10j,
                                -131195.91350052052+250.596884041963j,
                                -129769.51253513941+418.4129954748373j,
                                -128342.89946173567+582.4978662634657j,
                                -126916.0816011207+742.8512318380913j,
                                -125489.06627443137+899.4728403947261j,
                                -255257.7743036291+1302.9593369410566j,
                                -252403.98504401694+1619.9328385582571j,
                                -249549.80817545918+1929.4426637161478j,
                                -246695.25834099634+2231.4883471144994j,
                                -243840.35018421433+2526.0694489930866j,
                                -372181.0118497237+3063.7824391692097j,
                                -367899.03001565364+3511.2492723067344j,
                                -363616.5216848556+3947.519117225959j,
                                -359333.50882349204+4372.591371750252j,
                                -355050.0133983888+4786.4654720095095j,
                                -481961.9708774899+5439.737776485873j,
                                -476251.17526233435+5999.030141273965j,
                                -470539.75087923557+6543.391649400525j,
                                -464827.727017853+7072.821625660128j,
                                -459115.13296851754+7587.319445929513j,
                                -584597.9115226731+8337.481421203956j,
                                -577457.864005326+8989.929372864923j,
                                -570317.1220662091+9623.712361991546j,
                                -563175.7223183254+10238.82970420584j,
                                -556033.7013752613+10835.280778976365j,
                                -680087.0093515997+11663.66191366423j,
                                -671517.4548953543+12390.594958780766j,
                                -662947.1769791067+13095.129017308614j,
                                -654376.2195385366+13777.263459537942j,
                                -645804.6265097064+14436.997732376176j,
                                -768428.3553294612+15324.928243387556j,
                                -758429.2219678342+16107.676936057884j,
                                -748429.3727191698+16864.293019105473j,
                                -738428.8588406289+17594.775981327133j,
                                -728427.7315894562+18299.125400898414j,
                                -849621.9557233524+19227.93782942047j,
                                -838193.3545328676+20047.83536717602j,
                                -826764.081632497+20837.86739244789j,
                                -815334.1955991696+21598.033576357255j,
                                -803903.7550094888+22328.3336921686j,
                                -923668.7319400917+23279.36449933027j,
                                -910810.9570000157+24117.748318736893j,
                                -897952.5911217758+24922.534762038904j,
                                -885093.7001998298+25693.723746487256j,
                                -872234.3501278032+26431.315304232146j,
                                -990570.5202988212+27385.906466367258j,
                                -976284.0486378608+28224.119838185125j,
                                -961997.1033928017+29025.005328493495j,
                                -947709.7577728735+29788.563164450185j,
                                -933422.0849858609+30514.7937008702j,
                                -1050330.0717384135+31454.294304260206j,
                                -1034615.5632683731+32273.687928079376j,
                                -1018900.7351358121+33052.024842049475j,
                                -1003185.6678614526+33789.30564699426j,
                                -987470.4419638548+34485.53108413836j,
                                -1102951.0514597024+35391.29891914765j,
                                -1085809.348896115+36173.23251738136j,
                                -1068667.5171416576+36910.38257321021j,
                                -1051525.6440247481+37602.75012484379j,
                                -1034383.8173708147+38250.33636363748j,
                                -1148438.03850257+39103.73951812453j,
                                -1129870.1672722949+39829.58342927208j,
                                -1111302.3938528353+40506.91927979284j,
                                -1092734.8133759778+41135.748608975606j,
                                -1074167.5209695983+41716.07312198608j,
                                -1186796.525257907+42498.491573902866j,
                                -1166803.693393716+43149.62834496525j,
                                -1146811.2228494086+43748.53516988943j,
                                -1126819.216055306+44295.21415269337j,
                                -1106827.7754367818+44789.66757599862j,
                                -1218032.916914496+45482.49478506069j,
                                -1196616.5149366367+46040.32076302084j,
                                -1175200.774269871+46542.197860213935j,
                                -1153785.804637688+46988.12880899765j,
                                -1132371.7157574983+47378.11653304688j,
                                -1242154.530840839+47962.76103138769j,
                                -1219316.1316256023+48408.68795364171j,
                                -1196478.7301669605+48794.95032933648j,
                                -1173642.4434756925+49121.55158273022j,
                                -1150807.3885552564+49388.495342105234j,
                                -1259169.5959019815+49846.38232379815j,
                                -1234910.954537267+50161.83890744542j,
                                -1210653.6837984985+50413.91886528788j,
                                -1186397.907977339+50602.626376995766j,
                                -1162143.7513567938+50727.965838959375j,
                                -1269087.2517113718+51040.53874831739j,
                                -1243410.3053392738+51206.97227819822j,
                                -1217735.1388532748+51306.32100702547j,
                                -1192061.8838190082+51338.58993333722j,
                                -1166390.671791999+51303.78428507762j,
                                -1271917.5478178142+51452.50640362009j,
                                -1244824.4154642182+51451.384319007426j,
                                -1217776.8653923953+51349.87098297292j,
                                -1192061.8838190078+51338.58993333825j,
                                -1166390.6717919994+51303.784285078444j,
                                -1271917.5478178142+51452.50640362112j,
                                -1244824.4154642185+51451.38431900805j,
                                -1217776.865392395+51349.870982973895j,
                                -1192061.883819008+51338.58993333905j])

        Vind_coarse_ref = np.array([-65950.40348525057+46.204947134426675j,
                                -130474.70538874819+262.08171659565005j,
                                -129048.38805011283+428.0228092467341j,
                                -127621.8622745843+590.2329012796868j,
                                -126195.13538248734+748.7117345190865j,
                                -190718.6181797119+949.6640106909279j,
                                -253815.81292018804+1316.5563723466778j,
                                -250962.20926474128+1629.7811004758373j,
                                -248108.22534006982+1935.5426641656347j,
                                -245253.87578818726+2233.8406109037182j,
                                -308349.57873688306+2570.8794608483254j,
                                -370018.84376217576+3070.1256877511414j,
                                -365737.1678471481+3511.9714165717005j,
                                -361454.97644090303+3942.6209731361428j,
                                -357172.2915079856+4362.07377444048j,
                                -418839.5384988228+4816.534222920028j,
                                -479080.23431215505+5429.468687374113j,
                                -473369.8832538515+5981.269200578005j,
                                -467658.91809584486+6518.140008943979j,
                                -461947.3681255321+7040.0804628229025j,
                                -522185.6661161932+7593.294910775023j,
                                -580997.3362894028+8301.249680492498j,
                                -573857.8902738236+8944.336776413855j,
                                -566717.7681641205+9568.760429382208j,
                                -559577.0065703413+10174.51998694875j,
                                -618386.0455883131+10807.819807641969j,
                                -675768.4167620344+11592.126241890774j,
                                -667199.639042447+12307.831329637394j,
                                -658630.1598463289+13001.139349997124j,
                                -650060.0231056552+13672.049711559514j,
                                -707439.6762379728+14366.766846658711j,
                                -763392.6581087714+15208.75719229486j,
                                -753394.4949902361+15978.412887747627j,
                                -743395.6416201171+16721.938324234517j,
                                -733396.149251071+17439.33303521269j,
                                -789346.4726210159+18176.801590647017j,
                                -843870.1579154786+19057.810577932683j,
                                -832442.7387263284+19862.75229950681j,
                                -821014.6771106262+20637.83132250695j,
                                -809586.0316399438+21383.047369071057j,
                                -864107.2643706978+22144.60521060637j,
                                -917201.9288064776+23045.971648709798j,
                                -904345.5658567571+23867.539212779553j,
                                -891488.6448957233+24655.51270967229j,
                                -878631.2318115748+25409.89211400335j,
                                -931723.7959768343+26176.88246241304j,
                                -983389.8982106572+27079.9508344874j,
                                -969105.0867375202+27899.49005036806j,
                                -954819.8382460311+28681.705220409418j,
                                -940534.2259382054+29426.59663547632j,
                                -992198.7264997581+30180.369661210963j,
                                -1042436.9080623921+31066.491718950987j,
                                -1026724.3261624651+31865.355983339752j,
                                -1011011.4647997783+32623.167931980475j,
                                -995298.4044868337+33339.92823573487j,
                                -1045535.6292191035+34061.84265298705j,
                                -1094346.714437298+34912.37901056144j,
                                -1077207.222986013+35671.93090133057j,
                                -1060067.6461724956+36386.70423387008j,
                                -1042928.0718158811+37056.70012275304j,
                                -1091738.9912174447+37728.124782815394j,
                                -1139123.9871228428+38524.44651007006j,
                                -1120558.6296807448+39226.059379315026j,
                                -1101993.4175015762+39879.16979378529j,
                                -1083428.445706734+40483.779375447586j,
                                -1130814.212898817+41086.09485926184j,
                                -1176774.3091238497+41809.58507409629j,
                                -1156784.311829889+42434.64464033155j,
                                -1136794.726925749+43007.480519512974j,
                                -1116805.6568301965+43528.094904642j,
                                -1162767.6074421569+44042.695114437505j,
                                -1207304.176102922+44674.75057424718j,
                                -1185890.947554731+45204.65651365177j,
                                -1164478.4349994787+45678.62051611462j,
                                -1143066.748147886+46096.645409271296j,
                                -1187606.4001896917+46504.939159188856j,
                                -1230720.9957558298+47026.97185127597j,
                                -1207886.1268770003+47443.13938788449j,
                                -1185052.314042348+47799.65003795735j,
                                -1162219.6742486178+48096.507327316016j,
                                -1205338.7279703217+48379.91993291855j,
                                -1247033.0871218985+48773.35866376582j,
                                -1222778.3510162628+49057.220158503005j,
                                -1198525.0474234624+49277.71343506376j,
                                -1174273.3006198131+49434.84278095685j,
                                -1215973.6383580451+49574.81764752057j,
                                -1256249.6798294438+49821.10963082832j,
                                -1230577.031622372+49954.11616928581j,
                                -1204906.2287809155+50020.04709327537j,
                                -1179237.4028539897+50018.907515437924j,
                                -1219521.0888654687+49996.90772492681j,
                                -1258380.9132763043+50077.52016830949j,
                                -1231292.4899430291+50041.14314716377j,
                                -1204906.2287809155+50020.047093276386j,
                                -1179237.4028539897+50018.907515439j,
                                -1219521.0888654685+49996.90772492778j,
                                -1258380.9132763043+50077.520168310446j,
                                -1231292.4899430291+50041.14314716454j,
                                -1204906.2287809155+50020.04709327723j,
                                -1179237.4028539897+50018.90751543981j])

        np.testing.assert_allclose(Vind_fine_meas, Vind_fine_ref, rtol=1e-8,
            atol=1e-9, err_msg="In TestTravelingWaveCavity test_beam_fine_coarse,"
                            "mismatch in beam-induced voltage on fine grid")
        np.testing.assert_allclose(Vind_coarse_meas, Vind_coarse_ref, rtol=1e-8,
            atol=0, err_msg="In TestTravelingWaveCavity test_beam_fine_coarse,"
                            "mismatch in beam-induced voltage on coarse grid")


if __name__ == '__main__':

    unittest.main()

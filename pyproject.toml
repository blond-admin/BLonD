[build-system]
requires = [
    "setuptools >= 61.0",
    "wheel",
    "setuptools_scm[toml]>=3.4",
    "build",
    "twine"

]
build-backend = "setuptools.build_meta"

[project]
name = "blond"
dynamic = ["dependencies", "optional-dependencies", "version"]
description = "CERN code for simulating longitudinal beam dynamics in synchrotrons."
readme = "README.md"
license = { file = "LICENSE.txt" }
requires-python = ">=3.10"
authors = [
    { name = "Helga Timko", email = "helga.timko@cern.ch" },
]
maintainers = [
    { name = "Alexandre Lasheen", email = "alexandre.lasheen@cern.ch" },
    { name = "Simon Albright", email = "simon.albright@cern.ch" },
    { name = "Simon Lauber", email = "simon.fabian.lauber@cern.ch" },
]
classifiers = [
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
]

[tool.setuptools]
packages = { find = { } }
include-package-data = true

[project.urls]
Homepage = "https://blond.web.cern.ch/"
Documentation = "https://blond-code.docs.cern.ch/"
Repository = "https://gitlab.cern.ch/blond/BLonD"


[project.scripts]
blond-compile-cpp = "blond._core.backends.cpp.compile:main_cli"
blond-compile-cuda = "blond._core.backends.cuda.compile:main_cli"
blond-compile-fortran = "blond._core.backends.fortran.compile:main_cli"

[tool.setuptools_scm]
write_to = 'blond/_version.py' # autogenerates version string using git

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }
optional-dependencies = { all = { file = ["requirements.txt", "requirements-gpu.txt", "requirements-dev.txt", "requirements-fortran.txt", "requirements-doc.txt"] }, gpu = { file = ["requirements-gpu.txt"] }, fortran = { file = ["requirements-fortran.txt"] }, dev = { file = ["requirements-dev.txt"] }, legacy = { file = ["legacy/requirements.txt"] }, doc = { file = "requirements-doc.txt" } }

[tool.ruff]
src = ["blond"]  # Source directories
line-length = 79
target-version = "py310"  # Minimum supported version (no quotes)
fix = true  # Enable autofix
exclude = [
    "blond/legacy",
    "blond/experimental",
]
[tool.ruff.lint]
# Enable broad set of useful lint rules
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "B",    # flake8-bugbear (catch common bugs)
    # "I",  # isort (import sorting)
    # "N",  # pep8-naming
    "UP",   # pyupgrade
    # "C4", # flake8-comprehensions
    "D",    # pydocstyle
    # "SIM",# flake8-simplify
    "NPY",  # numpy-specific rules
    "PL",   # pylint rules
]

[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.pytest.ini_options]
minversion = "8.4"
addopts = "--import-mode=importlib --cov --cov-config=.coveragerc"

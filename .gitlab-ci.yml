variables:
  project_name: BLonD
  # Set the project root to the directory containing your setup.py
  project_root: ./
  PYPI_UPLOAD_URL: "https://upload.pypi.org/legacy/"

.on_tag:
  # Rules to run a job only on a git tagged commit
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

.before:
  before_script:
    # Verify CUDA installation
    - nvidia-smi
    - gcc --version
    - nvcc --version # probe NVCC installation

    # Install project with extras
    - python3 --version && gcc --version && mpirun --version
    - python3 -m pip install --upgrade pip
    - python3 -m pip install -v -e ${project_root}[all]
    - cd ${project_root}
    # Compile C++, CUDA, Fortran backends
    - python3 blond/_core/backends/cpp/compile.py
    - python3 blond/_core/backends/cuda/compile.py
    - python3 blond/_core/backends/fortran/compile.py


.main:
  script:
    - cd ${project_root}
    # Run all unittests + the examples
    - python3 -m pytest
      -v unittests/
      --import-mode=importlib
      --cov
      --cov-config=.coveragerc
      --cov-report html:coverage-html
      --cov-report xml:coverage.xml
      --junitxml=junit-report.xml

.after:
  after_script:
    - cd ${project_root}
    - python3 -m pip install coverage
    - coverage report
    # - coverage xml -o coverage-report.xml
  coverage: /(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/

.publish:
  artifacts:
    expire_in: 30 days
    reports:
      # Enables https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html
      coverage_report:
        coverage_format: cobertura
        path: ${project_root}coverage.xml
      # Enables https://docs.gitlab.com/ee/ci/unit_test_reports.html
      junit: ${project_root}junit-report.xml
    paths:
      - ${project_root}coverage-html/*
      - ${project_root}coverage.xml
      - ${project_root}junit-report.xml
    # reports:
    #   junit: ${project_root}/coverage-report.xml


test_py_310:
  image: gitlab-registry.cern.ch/blond/blond/python310
  stage: test
  extends:
    - .before
    - .main
    - .after
    - .publish
  tags:
    - k8s-gpu

test_py_311:
  image: gitlab-registry.cern.ch/blond/blond/python311
  stage: test
  extends:
    - .before
    - .main
    - .after
    # - .publish
  tags:
    - k8s-gpu

test_py_312:
  image: gitlab-registry.cern.ch/blond/blond/python312
  stage: test
  extends:
    - .before
    - .main
    - .after
    # - .publish
  tags:
    - k8s-gpu

release_sdist_310:
  image: gitlab-registry.cern.ch/blond/blond/python310
  stage: deploy
  extends:
    - .on_tag
  before_script:
    - python3 -m pip install --upgrade pip
    - python3 -m pip install build twine
    # Without an up-to-date setuptools, we don't get the requirements.txt
    # inside the sdist.
    - python3 -m pip install -U setuptools
    - eval ${PRE_SDIST_BUILD}
  script:
    - cd ${project_root}
    - python3 -m build --sdist .
    - python3 -m twine upload --verbose
      --repository-url="${PYPI_UPLOAD_URL}"
      --username="${PYPI_USERNAME}"
      --password="${PYPI_PASSWORD}"
      dist/*.tar.gz


test_documentation_building:
  image: gitlab-registry.cern.ch/blond/blond/python310
  script:
    - cd ${project_root}
    - python3 -m pip install --upgrade pip
    - python3 -m pip install .[doc]
    - sphinx-build -b html -W -D html_theme=sphinx_rtd_theme -D html_theme_options.navigation_depth=5 --keep-going __doc __doc/_build/html

pages:
  image: gitlab-registry.cern.ch/blond/blond/python310
  script:
    - cd ${project_root}
    - mkdir public
    - python3 -m pip install --upgrade pip
    - python3 -m pip install .[doc]
    - export PATH=$HOME/.local/bin:$PATH && make -C __doc html
    - cp -r __doc/_build/html/* public/
  artifacts:
    paths:
      - ${project_root}public
  only:
    - master

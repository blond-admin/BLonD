variables:
  project_name: BLonD
  # Set the project root to the directory containing your setup.py
  project_root: ./
  PYPI_UPLOAD_URL: "https://upload.pypi.org/legacy/"

.on_tag:
  # Rules to run a job only on a git tagged commit
  rules:
   - if: $CI_COMMIT_TAG
     when: on_success

.before:
  before_script:
    - apt-get update
    - apt-get install -y gcc g++  build-essential mpich libmpich-dev
    # Testingt inside a virtual env
    - python3 -m venv pyvenv
    - source pyvenv/bin/activate
    - python3 --version && gcc --version && mpirun --version
    - python3 -m pip install --upgrade pip
    - python3 -m pip install -v -e ${project_root}[test]
    - python3 blond/compile.py -p -optimize
    - python3 -m pip install pytest_cov mpi4py

.main:
  script:
    - cd ${project_root}
    # Run all unittests + the examples
    - python3 -m pytest -v unittests/ --cov --cov-config=.coveragerc --cov-report html:coverage-html 
      --cov-report xml:coverage.xml --junitxml=junit-report.xml -k 'not test_validate and not gpu'
    # Validate the agreement between mpi and non-mpi runs
    - python3 -m pytest -v unittests/ --cov --cov-config=.coveragerc --cov-report html  --cov-append
      --cov-report xml --junitxml=junit-report.xml -k 'test_validate and not gpu'

.after:
  after_script:
    - source pyvenv/bin/activate
    - cd ${project_root}
    - python3 -m pip install coverage
    - coverage report
    # - coverage xml -o coverage-report.xml
  coverage: /(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  
.publish:
  artifacts:
    expire_in: 30 days
    reports:
      # Enables https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html
      coverage_report:
        coverage_format: cobertura
        path: ${project_root}coverage.xml
      # Enables https://docs.gitlab.com/ee/ci/unit_test_reports.html
      junit: ${project_root}junit-report.xml
    paths:
      - ${project_root}coverage-html/*
    # reports:
    #   junit: ${project_root}/coverage-report.xml


test_py_38:
  variables:  
    PY_VERSION: "3.8"
  image: python:${PY_VERSION}
  stage: test
  extends:
    - .before
    - .main
    - .after
    - .publish

test_py_310:
  variables:
    PY_VERSION: "3.10"
  image: python:${PY_VERSION}
  stage: test
  extends:
    - .before
    - .main
    - .after
    # - .publish


release_sdist_38:
  variables:
    PY_VERSION: "3.8"
  image: python:${PY_VERSION}
  stage: deploy
  extends:
    - .on_tag
  before_script:
   - apt-get update
   - apt-get install -y git
   - python3 -m pip install --upgrade pip
   - python3 -m pip install build twine
   # Without an up-to-date setuptools, we don't get the requirements.txt
   # inside the sdist.
   - python3 -m pip install -U setuptools
   - eval ${PRE_SDIST_BUILD}
  script:
   - cd ${project_root}
   - python3 -m build --sdist .
   - python3 -m twine upload --verbose
        --repository-url="${PYPI_UPLOAD_URL}"
        --username="${PYPI_USERNAME}"
        --password="${PYPI_PASSWORD}"
        dist/*.tar.gz


pages:
  variables:
    PY_VERSION: "3.8"
  image: python:${PY_VERSION}
  script:
   - cd ${project_root}
   - mkdir public
   - python3 -m pip install --upgrade pip
   - python3 -m pip install -v ${project_root}[doc]
   - make -C __doc html
   - cp -r __doc/_build/html/* public/
  artifacts:
    paths:
     - ${project_root}public
  only:
   - master
